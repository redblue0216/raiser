# Raiser
## 介绍
Raiser是一个基于HDF5的优化计算函数的缓存装饰器

+ 主要技术:

	* 缓存存储：HDF5


## 安装
Raiser采用Python开发，得益于Python良好的社区环境，安装支持Pythonic风格的各种管理器。

```
	$pip install -i http://10.3.110.71:8080 --trusted-host10.3.110.71 Raiser
```


## 快速指南
+ Raiser

+ 代码示例：


```Python
	from Raiser.cache_operator import *
	from Raiser.cache_decorator import *
	import numpy as np 



	### HDF5操作测试 ###########################################
	### hdf5写入数据
	print("########################################################################## 1")
	x = np.array([[1, 2, 3], [4, 5, 6]])
	y = np.array([[1, 2], [3, 4], [5, 6]])
	Hdf5Operator.hdf5_writer_ndarray(h5path = 'test_operator.h5',
	                                 group_name = 'x',
	                                 info = 'var x test',
	                                 version_name = '01',
	                                 ndarray_obj = x)
	Hdf5Operator.hdf5_writer_ndarray(h5path = 'test_operator.h5',
	                                 group_name = 'y',
	                                 info = 'var y test',
	                                 version_name = '01',
	                                 ndarray_obj = y)                                 
	### hdf5读取数据
	print("########################################################################## 2")
	tmp_x = Hdf5Operator.hdf5_read_ndarray(h5path = 'test_operator.h5',
	                                       group_name = 'x',
	                                       version_name = '01')         
	# print(x,type(x))    
	### 缓存装饰器测试 ############################################
	### 获取当前路径
	print("########################################################################## 3")
	CacheDecorator = CacheDecorator(hdf5_name = 'test_operator.h5')
	print(CacheDecorator.cachepath)
	### 定义原始运行函数
	print("########################################################################## 4")
	@CacheDecorator.hdf5_run(storage_name = 'multi_array_result')
	def multi_array(x,y):
	    multi_array_result = np.dot(x,y)
	    return multi_array_result                                                           
	### 运行函数
```






